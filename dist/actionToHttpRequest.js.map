{"version":3,"file":"actionToHttpRequest.js","sourceRoot":"","sources":["../src/actionToHttpRequest.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,gEAAuC;AACvC,kDAAwB;AAOxB,SAA8B,mBAAmB,CAC/C,MAAc,EACd,QAA+B;;QAE/B,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;QACnC,MAAM,WAAW,GAAG,MAAM,qBAAqB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAElE,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;QAE5D,IAAI,aAAa,KAAK,KAAK,EAAE;YAC3B,OAAO,OAAO,CAAC,OAAO,CAAC;gBACrB,GAAG,EAAE,MAAM,CAAC,IAAI;gBAChB,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,MAAM,EAAE,WAAW;gBACnB,gBAAgB,EAAE,MAAM,CAAC,EAAE;oBACzB,OAAO,eAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBAChC,CAAC;gBACD,IAAI,EAAE,EAAE,CAAC,uEAAuE;aACjF,CAAC,CAAC;SACJ;aAAM;YACL,OAAO,OAAO,CAAC,OAAO,CAAC;gBACrB,GAAG,EAAE,MAAM,CAAC,IAAI;gBAChB,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,IAAI,EAAE,WAAW;gBACjB,gBAAgB,EAAE,CAAC,sBAAsB,EAAE,eAAe,CAAC;gBAC3D,OAAO,EAAE;oBACP,cAAc,EAAE,MAAM,CAAC,IAAI;iBAC5B;aACF,CAAC,CAAC;SACJ;IACH,CAAC;CAAA;AA9BD,sCA8BC;AAED,SAAS,sBAAsB,CAAC,IAAS,EAAE,OAAY;IACrD,MAAM,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;IAE/C,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,iBAAiB,GAAG,sBAAW,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC;IAEjE,IAAI,iBAAiB,KAAK,kBAAkB,EAAE;QAC5C,OAAO,IAAI,CAAC,CAAC,uCAAuC;KACrD;IAED,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;AACpD,CAAC;AAED,SAAS,eAAe,CAAC,IAAS,EAAE,OAAY;IAC9C,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QAClC,MAAM,IAAI,KAAK,CACb,6CAA6C,OAAO,CAAC,cAAc,CAAC,EAAE,CACvE,CAAC;KACH;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAe,qBAAqB,CAClC,MAAe,EACf,QAA+B;;QAE/B,MAAM,IAAI,GAAQ,EAAE,CAAC;QAErB,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC9B;QAED,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YAC1B,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,CAAC;YAEpC,IAAI,KAAK,EAAE;gBACT,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;aAC1B;SACF;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;CAAA","sourcesContent":["import { AxiosRequestConfig } from \"axios\";\nimport contentType from \"content-type\";\nimport URI from \"urijs\";\nimport { Action, Field } from \"../gen/siren\";\n\nexport type FieldValueResolverFn = (\n  field: Field\n) => Promise<string | undefined>;\n\nexport default async function actionToHttpRequest(\n  action: Action,\n  resolver?: FieldValueResolverFn\n): Promise<AxiosRequestConfig> {\n  const fields = action.fields || [];\n  const fieldValues = await resolveAllFieldValues(fields, resolver);\n\n  const requestMethod = action.method ? action.method : \"GET\";\n\n  if (requestMethod === \"GET\") {\n    return Promise.resolve({\n      url: action.href,\n      method: action.method,\n      params: fieldValues,\n      paramsSerializer: params => {\n        return URI.buildQuery(params);\n      },\n      data: {} // Need to set this because of https://github.com/axios/axios/issues/86\n    });\n  } else {\n    return Promise.resolve({\n      url: action.href,\n      method: action.method,\n      data: fieldValues,\n      transformRequest: [jsonRequestTransformer, failIfNotBuffer],\n      headers: {\n        \"Content-Type\": action.type\n      }\n    });\n  }\n}\n\nfunction jsonRequestTransformer(data: any, headers: any): any {\n  const rawContentType = headers[\"Content-Type\"];\n\n  if (!rawContentType) {\n    return data;\n  }\n\n  const parsedContentType = contentType.parse(rawContentType).type;\n\n  if (parsedContentType !== \"application/json\") {\n    return data; // pass on data to the next transformer\n  }\n\n  return Buffer.from(JSON.stringify(data), \"utf-8\");\n}\n\nfunction failIfNotBuffer(data: any, headers: any): any {\n  if (data && !Buffer.isBuffer(data)) {\n    throw new Error(\n      `Failed to serialize data for content-type ${headers[\"Content-Type\"]}`\n    );\n  }\n\n  return data;\n}\n\nasync function resolveAllFieldValues(\n  fields: Field[],\n  resolver?: FieldValueResolverFn\n): Promise<any> {\n  const data: any = {};\n\n  if (!resolver) {\n    return Promise.resolve(data);\n  }\n\n  for (const field of fields) {\n    const value = await resolver(field);\n\n    if (value) {\n      data[field.name] = value;\n    }\n  }\n\n  return Promise.resolve(data);\n}\n"]}