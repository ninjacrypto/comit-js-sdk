{"version":3,"file":"swap.js","sourceRoot":"","sources":["../src/swap.ts"],"names":[],"mappings":"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","sourcesContent":["import { BigNumber } from \"ethers/utils\";\nimport { Field } from \"../gen/siren\";\nimport { BitcoinWallet } from \"./bitcoinWallet\";\nimport { Cnd, LedgerAction, SwapEntity } from \"./cnd\";\nimport { EthereumWallet } from \"./ethereumWallet\";\n\nexport interface ActionParams {\n  timeout: number;\n  tryInterval: number;\n}\n\nexport class Swap {\n  constructor(\n    private readonly bitcoinWallet: BitcoinWallet,\n    private readonly ethereumWallet: EthereumWallet,\n    private readonly cnd: Cnd,\n    readonly self: string\n  ) {}\n\n  public async accept(params: ActionParams) {\n    return await this.tryExecuteAction(\"accept\", params);\n  }\n\n  public async decline(params: ActionParams) {\n    return await this.tryExecuteAction(\"decline\", params);\n  }\n\n  public async deploy(params: ActionParams) {\n    const response = await this.tryExecuteAction(\"deploy\", params);\n    return await this.doLedgerAction(response.data);\n  }\n\n  public async fund(params: ActionParams) {\n    const response = await this.tryExecuteAction(\"fund\", params);\n    return await this.doLedgerAction(response.data);\n  }\n\n  public async redeem(params: ActionParams) {\n    const response = await this.tryExecuteAction(\"redeem\", params);\n    return await this.doLedgerAction(response.data);\n  }\n\n  public async refund(params: ActionParams) {\n    const response = await this.tryExecuteAction(\"refund\", params);\n    return await this.doLedgerAction(response.data);\n  }\n\n  private tryExecuteAction(\n    actionName: string,\n    { timeout, tryInterval }: ActionParams\n  ) {\n    return this.timeoutPromise(\n      timeout,\n      this.executeAction(actionName, tryInterval)\n    );\n  }\n\n  private timeoutPromise<T>(ms: number, promise: Promise<T>): Promise<T> {\n    const timeout = new Promise<T>((_, reject) => {\n      const id = setTimeout(() => {\n        clearTimeout(id);\n        reject(\"Timed out in \" + ms + \"ms.\");\n      }, ms);\n    });\n\n    return Promise.race([promise, timeout]);\n  }\n\n  private async executeAction(actionName: string, repeatInterval: number) {\n    while (true) {\n      await this.sleep(repeatInterval);\n\n      const response = await this.cnd.fetch<SwapEntity>(this.self);\n      const swap = response.data;\n      const actions = swap.actions;\n\n      if (!actions || actions.length === 0) {\n        continue;\n      }\n\n      const action = actions.find(action => action.name === actionName);\n\n      if (!action) {\n        continue;\n      }\n\n      return this.cnd.executeAction(action!, (field: Field) =>\n        this.fieldValueResolver(field)\n      );\n    }\n  }\n\n  private async sleep(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  private async fieldValueResolver(field: Field): Promise<string | undefined> {\n    const classes: string[] = field.class;\n\n    if (classes.includes(\"bitcoin\") && classes.includes(\"address\")) {\n      return this.bitcoinWallet.getAddress();\n    }\n\n    if (classes.includes(\"bitcoin\") && classes.includes(\"feePerWU\")) {\n      return Promise.resolve(this.bitcoinWallet.getFee());\n    }\n\n    if (classes.includes(\"ethereum\") && classes.includes(\"address\")) {\n      return Promise.resolve(this.ethereumWallet.getAccount());\n    }\n  }\n\n  private async doLedgerAction(action: LedgerAction) {\n    switch (action.type) {\n      case \"bitcoin-broadcast-signed-transaction\": {\n        const { hex, network } = action.payload;\n\n        return await this.bitcoinWallet.broadcastTransaction(hex, network);\n      }\n      case \"bitcoin-send-amount-to-address\": {\n        const { to, amount, network } = action.payload;\n        const sats = parseInt(amount, 10);\n\n        return await this.bitcoinWallet.sendToAddress(to, sats, network);\n      }\n      case \"ethereum-call-contract\": {\n        const { data, contract_address, gas_limit } = action.payload;\n\n        return await this.ethereumWallet.callContract(\n          data,\n          contract_address,\n          gas_limit\n        );\n      }\n      case \"ethereum-deploy-contract\": {\n        const { amount, data, gas_limit } = action.payload;\n        const value = new BigNumber(amount);\n\n        return await this.ethereumWallet.deployContract(data, value, gas_limit);\n      }\n    }\n  }\n}\n"]}