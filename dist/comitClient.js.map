{"version":3,"file":"comitClient.js","sourceRoot":"","sources":["../src/comitClient.ts"],"names":[],"mappings":"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","sourcesContent":["import { Action, EmbeddedRepresentationSubEntity, Entity } from \"../gen/siren\";\nimport { BitcoinWallet } from \"./bitcoinWallet\";\nimport { Cnd, SwapRequest } from \"./cnd\";\nimport { EthereumWallet } from \"./ethereumWallet\";\nimport { Swap } from \"./swap\";\n\nexport class ComitClient {\n  constructor(\n    private readonly bitcoinWallet: BitcoinWallet,\n    private readonly ethereumWallet: EthereumWallet,\n    private readonly cnd: Cnd\n  ) {}\n\n  public async sendSwap(swapRequest: SwapRequest): Promise<Swap> {\n    const swapLocation = await this.cnd.postSwap(swapRequest);\n    if (!swapLocation) {\n      throw new Error(\"Problem creating swap, no swap location returned.\");\n    }\n    const response = await this.cnd.fetch(swapLocation);\n    if (!response) {\n      throw new Error(\n        `Swap with location ${swapLocation} could not be retrieved.`\n      );\n    }\n    return this.newSwap(response.data as Entity);\n  }\n\n  public async getNewSwaps(): Promise<Swap[]> {\n    const swaps = await this.cnd.getSwaps();\n    return swaps\n      .filter((swap: EmbeddedRepresentationSubEntity) => {\n        return (\n          swap.actions &&\n          !!swap.actions.find((action: Action) => {\n            return action.name === \"accept\";\n          })\n        );\n      })\n      .map(swap => this.newSwap(swap));\n  }\n\n  public async getOngoingSwaps(): Promise<Swap[]> {\n    const swaps = await this.cnd.getSwaps();\n\n    return swaps\n      .filter((swap: EmbeddedRepresentationSubEntity) => {\n        return (\n          swap.actions &&\n          !!swap.actions.find((action: Action) => {\n            return action.name === \"fund\" || action.name === \"redeem\";\n          })\n        );\n      })\n      .map(swap => this.newSwap(swap));\n  }\n\n  public async getDoneSwaps(): Promise<Swap[]> {\n    const swaps = await this.cnd.getSwaps();\n    return swaps\n      .filter((swap: EmbeddedRepresentationSubEntity) => {\n        return (\n          swap.properties &&\n          (swap.properties.status === \"SWAPPED\" ||\n            swap.properties.status === \"NOT_SWAPPED\" ||\n            swap.properties.status === \"INTERNAL_FAILURE\")\n        );\n      })\n      .map(swap => this.newSwap(swap));\n  }\n\n  private newSwap(swap: EmbeddedRepresentationSubEntity | Entity) {\n    return new Swap(\n      this.bitcoinWallet,\n      this.ethereumWallet,\n      this.cnd,\n      swap.links!.find(link => link.rel.includes(\"self\"))!.href\n    );\n  }\n}\n"]}