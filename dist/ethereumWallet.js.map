{"version":3,"file":"ethereumWallet.js","sourceRoot":"","sources":["../src/ethereumWallet.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,mCAAwC;AAKxC,MAAa,cAAc;IAGzB,YAAmB,UAAkB,EAAE,GAAoC;QACzE,MAAM,QAAQ,GAAG,IAAI,eAAM,CAAC,SAAS,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAClE,MAAM,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,eAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,eAAM,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;QAE3E,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IAEM,UAAU;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;IAC7B,CAAC;IAEM,UAAU;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;IAClC,CAAC;IAEY,cAAc,CACzB,IAAY,EACZ,KAAgB,EAChB,QAAgB;;YAEhB,MAAM,WAAW,GAAuB;gBACtC,IAAI;gBACJ,KAAK;gBACL,QAAQ;aACT,CAAC;YACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YAEhE,OAAO,QAAQ,CAAC,IAAI,CAAC;QACvB,CAAC;KAAA;IAEY,YAAY,CACvB,IAAY,EACZ,eAAuB,EACvB,QAAgB;;YAEhB,MAAM,WAAW,GAAuB;gBACtC,IAAI;gBACJ,EAAE,EAAE,eAAe;gBACnB,QAAQ;aACT,CAAC;YACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YAEhE,OAAO,QAAQ,CAAC,IAAI,CAAC;QACvB,CAAC;KAAA;CACF;AA/CD,wCA+CC","sourcesContent":["import { ethers, Wallet } from \"ethers\";\nimport { TransactionRequest } from \"ethers/providers\";\nimport { Arrayish, BigNumber, SigningKey } from \"ethers/utils\";\nimport { HDNode } from \"ethers/utils/hdnode\";\n\nexport class EthereumWallet {\n  private readonly wallet: Wallet;\n\n  public constructor(jsonRpcUrl: string, key?: SigningKey | HDNode | Arrayish) {\n    const provider = new ethers.providers.JsonRpcProvider(jsonRpcUrl);\n    const wallet = key ? new ethers.Wallet(key) : ethers.Wallet.createRandom();\n\n    this.wallet = wallet.connect(provider);\n  }\n\n  public getAccount() {\n    return this.wallet.address;\n  }\n\n  public getBalance() {\n    return this.wallet.getBalance();\n  }\n\n  public async deployContract(\n    data: string,\n    value: BigNumber,\n    gasLimit: string\n  ) {\n    const transaction: TransactionRequest = {\n      data,\n      value,\n      gasLimit\n    };\n    const response = await this.wallet.sendTransaction(transaction);\n\n    return response.hash;\n  }\n\n  public async callContract(\n    data: string,\n    contractAddress: string,\n    gasLimit: string\n  ) {\n    const transaction: TransactionRequest = {\n      data,\n      to: contractAddress,\n      gasLimit\n    };\n    const response = await this.wallet.sendTransaction(transaction);\n\n    return response.hash;\n  }\n}\n"]}