{"version":3,"file":"bitcoinWallet.js","sourceRoot":"","sources":["../src/bitcoinWallet.ts"],"names":[],"mappings":"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","sourcesContent":["import { Amount, Chain, Network, Pool, TX, WalletDB } from \"bcoin\";\nimport Logger from \"blgr\";\n\nexport class BitcoinWallet {\n  public static async newInstance(\n    network: string,\n    peerUri: string,\n    hdKey: string\n  ) {\n    const parsedNetwork = Network.get(network);\n\n    const logger = new Logger({\n      level: \"warning\"\n    });\n    const walletdb = new WalletDB({\n      memory: true,\n      witness: true,\n      logger,\n      network: parsedNetwork\n    });\n    const chain = new Chain({\n      spv: true,\n      logger,\n      network: parsedNetwork\n    });\n    const pool = new Pool({\n      chain,\n      logger\n    });\n\n    await logger.open();\n    await pool.open();\n    await walletdb.open();\n    await chain.open();\n    await pool.connect();\n\n    const wallet = await walletdb.create({\n      logger,\n      network: parsedNetwork,\n      master: hdKey\n    });\n\n    const account = await wallet.getAccount(0);\n\n    for (let i = 0; i < 100; i++) {\n      pool.watchAddress(await account.deriveReceive(i).getAddress());\n      pool.watchAddress(await account.deriveChange(i).getAddress());\n    }\n\n    pool.startSync();\n\n    pool.on(\"tx\", (tx: any) => {\n      walletdb.addTX(tx);\n    });\n\n    pool.on(\"block\", (block: any) => {\n      walletdb.addBlock(block);\n      if (block.txs.length > 0) {\n        block.txs.forEach((tx: any) => {\n          walletdb.addTX(tx);\n        });\n      }\n    });\n\n    const netAddr = await pool.hosts.addNode(peerUri);\n    const peer = pool.createOutbound(netAddr);\n    pool.peers.add(peer);\n\n    return new BitcoinWallet(parsedNetwork, walletdb, pool, chain, wallet);\n  }\n\n  private constructor(\n    public readonly network: any,\n\n    // @ts-ignore\n    private readonly walletdb: any,\n    private readonly pool: any,\n\n    // @ts-ignore\n    private readonly chain: any,\n    private readonly wallet: any\n  ) {}\n\n  public async getBalance() {\n    const balance = await this.wallet.getBalance();\n    // TODO: Balances stay unconfirmed, try to use bcoin.SPVNode (and set node.http to undefined) see if it catches the confirmations\n    const amount = new Amount(balance.toJSON().unconfirmed, \"sat\");\n    return amount.toBTC();\n  }\n\n  public async getAddress() {\n    const receiveAddress = await this.wallet.receiveAddress(0);\n    return receiveAddress.toString(this.network);\n  }\n\n  public async sendToAddress(\n    address: string,\n    satoshis: number,\n    network: string\n  ) {\n    this.assertNetwork(network);\n\n    const tx = await this.wallet.send({\n      witness: true,\n      outputs: [\n        {\n          address,\n          value: satoshis\n        }\n      ]\n    });\n    const broadcast = await this.pool.broadcast(tx);\n    return { tx, broadcast };\n  }\n\n  public async broadcastTransaction(transactionHex: string, network: string) {\n    this.assertNetwork(network);\n\n    const transaction = TX.fromRaw(transactionHex, \"hex\");\n    return this.pool.broadcast(transaction);\n  }\n\n  public getFee() {\n    // should be dynamic in a real application\n    return \"150\";\n  }\n\n  private assertNetwork(network: string) {\n    if (network !== this.network.type) {\n      throw new Error(\n        `This wallet is only connected to the ${this.network.type} network and cannot perform actions on the ${network} network`\n      );\n    }\n  }\n}\n"]}