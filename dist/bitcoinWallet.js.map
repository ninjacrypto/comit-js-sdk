{"version":3,"file":"bitcoinWallet.js","sourceRoot":"","sources":["../src/bitcoinWallet.ts"],"names":[],"mappings":"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","sourcesContent":["import { Amount, Chain, Pool, TX, WalletDB } from \"bcoin\";\nimport Logger from \"blgr\";\n\nexport class BitcoinWallet {\n  public readonly network: any;\n  private readonly walletdb: any;\n  private wallet: any;\n  private address: any;\n  private readonly pool: any;\n  private readonly chain: any;\n  private readonly logger: any;\n\n  constructor(network: string) {\n    this.logger = new Logger({\n      level: \"warning\"\n    });\n    this.walletdb = new WalletDB({\n      network,\n      memory: true,\n      witness: true,\n      logger: this.logger\n    });\n    this.network = network;\n    this.chain = new Chain({\n      spv: true,\n      network,\n      logger: this.logger\n    });\n    this.pool = new Pool({\n      chain: this.chain,\n      network,\n      logger: this.logger\n    });\n  }\n\n  public async init(peerUri: string) {\n    await this.logger.open();\n    await this.pool.open();\n    await this.walletdb.open();\n    await this.chain.open();\n    await this.pool.connect();\n    this.wallet = await this.walletdb.create({\n      logger: this.logger,\n      network: this.network\n    });\n    this.address = await this.wallet.receiveAddress();\n\n    this.pool.watchAddress(this.address);\n    this.pool.startSync();\n\n    this.pool.on(\"tx\", (tx: any) => {\n      this.walletdb.addTX(tx);\n    });\n\n    this.pool.on(\"block\", (block: any) => {\n      this.walletdb.addBlock(block);\n      if (block.txs.length > 0) {\n        block.txs.forEach((tx: any) => {\n          this.walletdb.addTX(tx);\n        });\n      }\n    });\n\n    const netAddr = await this.pool.hosts.addNode(peerUri);\n    const peer = this.pool.createOutbound(netAddr);\n    this.pool.peers.add(peer);\n  }\n\n  public async getBalance() {\n    this.isInit();\n    const balance = await this.wallet.getBalance();\n    // TODO: Balances stay unconfirmed, try to use bcoin.SPVNode (and set node.http to undefined) see if it catches the confirmations\n    const amount = new Amount(balance.toJSON().unconfirmed, \"sat\");\n    return amount.toBTC();\n  }\n\n  public getAddress() {\n    this.isInit();\n    return this.address.toString(this.network);\n  }\n\n  public async sendToAddress(\n    address: string,\n    satoshis: number,\n    network: string\n  ) {\n    this.isInit();\n    this.assertNetwork(network);\n\n    const tx = await this.wallet.send({\n      witness: true,\n      outputs: [\n        {\n          address,\n          value: satoshis\n        }\n      ]\n    });\n    const broadcast = await this.pool.broadcast(tx);\n    return { tx, broadcast };\n  }\n\n  public async broadcastTransaction(transactionHex: string, network: string) {\n    this.assertNetwork(network);\n\n    const transaction = TX.fromRaw(transactionHex, \"hex\");\n    return this.pool.broadcast(transaction);\n  }\n\n  private isInit() {\n    if (!this.wallet) {\n      throw new Error(\"Bitcoin wallet is not initialized\");\n    }\n  }\n\n  private assertNetwork(network: string) {\n    if (network !== this.network) {\n      throw new Error(\n        `This wallet is only connected to the ${this.network} network and cannot perform actions on the ${network} network`\n      );\n    }\n  }\n}\n"]}