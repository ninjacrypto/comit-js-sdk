{"version":3,"file":"cnd.js","sourceRoot":"","sources":["../src/cnd.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,kDAA2D;AAC3D,kDAAwB;AAExB,gFAE+B;AAsL/B;;GAEG;AACH,MAAa,GAAG;IAGd,YAAmB,MAAc;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEY,SAAS;;YACpB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YAClC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;aACzC;YACD,OAAO,IAAI,CAAC,EAAE,CAAC;QACjB,CAAC;KAAA;IAEY,sBAAsB;;YACjC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YAClC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;gBAC1B,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;aACvD;YACD,OAAO,IAAI,CAAC,gBAAgB,CAAC;QAC/B,CAAC;KAAA;IAEY,QAAQ,CAAC,IAAiB;;YACrC,OAAO,eAAK;iBACT,IAAI,CACH,IAAI,CAAC,OAAO,EAAE;iBACX,IAAI,CAAC,cAAc,CAAC;iBACpB,QAAQ,EAAE,EACb,IAAI,CACL;iBACA,IAAI,CAAC,GAAG,CAAC,EAAE;gBACV,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC9B,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAEY,QAAQ;;YACnB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC3C,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAc,CAAC;YACvC,OAAO,MAAM,CAAC,QAA6C,CAAC;QAC9D,CAAC;KAAA;IAEM,KAAK,CAAI,IAAY;QAC1B,OAAO,eAAK,CAAC,GAAG,CACd,IAAI,CAAC,OAAO,EAAE;aACX,IAAI,CAAC,IAAI,CAAC;aACV,QAAQ,EAAE,CACd,CAAC;IACJ,CAAC;IAEY,aAAa,CACxB,MAAc,EACd,QAA+B;;YAE/B,MAAM,OAAO,GAAG,MAAM,6BAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAE5D,OAAO,eAAK,CAAC,OAAO,iBAClB,OAAO,EAAE,IAAI,CAAC,MAAM,IACjB,OAAO,EACV,CAAC;QACL,CAAC;KAAA;IAEO,OAAO;QACb,OAAO,IAAI,eAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;IAEa,OAAO;;YACnB,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC5D,OAAO,QAAQ,CAAC,IAAI,CAAC;QACvB,CAAC;KAAA;CACF;AAtED,kBAsEC","sourcesContent":["import axios, { AxiosPromise, AxiosResponse } from \"axios\";\nimport URI from \"urijs\";\nimport { Action, EmbeddedRepresentationSubEntity, Entity } from \"../gen/siren\";\nimport actionToHttpRequest, {\n  FieldValueResolverFn\n} from \"./actionToHttpRequest\";\n\ninterface GetInfo {\n  id: string;\n  listen_addresses: string[]; // multiaddresses\n}\n\nexport interface Ledger {\n  name: string;\n  [k: string]: any;\n}\n\nexport interface Asset {\n  name: string;\n  [k: string]: any;\n}\n\nexport interface Peer {\n  peer_id: string;\n  address_hint: string;\n}\n\nexport interface SwapRequest {\n  alpha_ledger: Ledger;\n  alpha_asset: Asset;\n  beta_ledger: Ledger;\n  beta_asset: Asset;\n  alpha_expiry: number;\n  beta_expiry: number;\n  alpha_ledger_refund_identity?: string;\n  beta_ledger_redeem_identity?: string;\n  peer: Peer;\n}\n\nexport interface BitcoinSendAmountToAddressPayload {\n  to: string;\n  amount: string;\n  network: string;\n}\n\nexport interface BitcoinBroadcastSignedTransactionPayload {\n  hex: string;\n  network: string;\n}\n\nexport interface EthereumDeployContractPayload {\n  data: string;\n  amount: string;\n  gas_limit: string;\n  network: string;\n}\n\nexport interface EthereumCallContractPayload {\n  contract_address: string;\n  data: string;\n  gas_limit: string;\n  network: string;\n}\n\nexport type LedgerAction =\n  | {\n      type: \"bitcoin-send-amount-to-address\";\n      payload: BitcoinSendAmountToAddressPayload;\n    }\n  | {\n      type: \"bitcoin-broadcast-signed-transaction\";\n      payload: BitcoinBroadcastSignedTransactionPayload;\n    }\n  | {\n      type: \"ethereum-deploy-contract\";\n      payload: EthereumDeployContractPayload;\n    }\n  | {\n      type: \"ethereum-call-contract\";\n      payload: EthereumCallContractPayload;\n    };\n\nexport interface SwapEntity {\n  /**\n   * The id of the swap.\n   */\n  id: string;\n  /**\n   * The peer-id of the counterparty of this swap.\n   */\n  counterparty: string;\n  /**\n   * The role in which you are participating in this swap.\n   */\n  role: \"Alice\" | \"Bob\";\n  /**\n   * The cryptographic protocol that is employed in this swap.\n   */\n  protocol: string;\n  /**\n   * The status this swap is currently in.\n   */\n  status: \"IN_PROGRESS\" | \"SWAPPED\" | \"NOT_SWAPPED\" | \"INTERNAL_FAILURE\";\n  /**\n   * The parameters of this swap.\n   */\n  parameters: {\n    alpha_asset: Asset;\n    alpha_ledger: LedgerAction;\n    beta_asset: Asset;\n    beta_ledger: Ledger;\n    [k: string]: any;\n  };\n  /**\n   * The detailed state of the swap.\n   */\n  state?: {\n    /**\n     * The state of the alpha ledger regarding the swap.\n     */\n    alpha_ledger: {\n      /**\n       * The transaction ID of the deployment transaction on the alpha ledger.\n       */\n      deploy_tx: string | null;\n      fund_tx: string | null;\n      htlc_location: any;\n      redeem_tx: string | null;\n      refund_tx: string | null;\n      /**\n       * The status of the HTLC on the alpha ledger.\n       */\n      status:\n        | \"NOT_DEPLOYED\"\n        | \"DEPLOYED\"\n        | \"FUNDED\"\n        | \"REDEEMED\"\n        | \"REFUNDED\"\n        | \"INCORRECTLY_FUNDED\";\n      [k: string]: any;\n    };\n    /**\n     * The state of the beta ledger regarding the swap.\n     */\n    beta_ledger: {\n      /**\n       * The transaction ID of the deployment transaction on the beta ledger.\n       */\n      deploy_tx: string | null;\n      fund_tx: string | null;\n      htlc_location: any;\n      redeem_tx: string | null;\n      refund_tx: string | null;\n      /**\n       * The status of the HTLC on the beta ledger.\n       */\n      status:\n        | \"NOT_DEPLOYED\"\n        | \"DEPLOYED\"\n        | \"FUNDED\"\n        | \"REDEEMED\"\n        | \"REFUNDED\"\n        | \"INCORRECTLY_FUNDED\";\n      [k: string]: any;\n    };\n    /**\n     * The state created during the communication of the two parties regarding the swap.\n     */\n    communication: {\n      /**\n       * The expiry value of the HTLC on the alpha ledger. The semantic value depends on the ledger.\n       */\n      alpha_expiry: number;\n      alpha_redeem_identity: string | null;\n      alpha_refund_identity: string | null;\n      beta_expiry: number;\n      beta_redeem_identity: string | null;\n      beta_refund_identity: string | null;\n      secret_hash: string;\n      status: \"SENT\" | \"ACCEPTED\" | \"REJECTED\";\n      [k: string]: any;\n    };\n    [k: string]: any;\n  };\n  [k: string]: any;\n}\n\n/**\n * Facilitates access to the cnd REST API\n */\nexport class Cnd {\n  private readonly cndUrl: string;\n\n  public constructor(cndUrl: string) {\n    this.cndUrl = cndUrl;\n  }\n\n  public async getPeerId(): Promise<string> {\n    const info = await this.getInfo();\n    if (!info.id) {\n      throw new Error(\"id field not present\");\n    }\n    return info.id;\n  }\n\n  public async getPeerListenAddresses(): Promise<string[]> {\n    const info = await this.getInfo();\n    if (!info.listen_addresses) {\n      throw new Error(\"listen addresses field not present\");\n    }\n    return info.listen_addresses;\n  }\n\n  public async postSwap(swap: SwapRequest): Promise<string> {\n    return axios\n      .post(\n        this.rootUrl()\n          .path(\"swaps/rfc003\")\n          .toString(),\n        swap\n      )\n      .then(res => {\n        return res.headers.location;\n      });\n  }\n\n  public async getSwaps(): Promise<EmbeddedRepresentationSubEntity[]> {\n    const response = await this.fetch(\"swaps\");\n    const entity = response.data as Entity;\n    return entity.entities as EmbeddedRepresentationSubEntity[];\n  }\n\n  public fetch<T>(path: string): AxiosPromise<T> {\n    return axios.get(\n      this.rootUrl()\n        .path(path)\n        .toString()\n    );\n  }\n\n  public async executeAction(\n    action: Action,\n    resolver?: FieldValueResolverFn\n  ): Promise<AxiosResponse> {\n    const request = await actionToHttpRequest(action, resolver);\n\n    return axios.request({\n      baseURL: this.cndUrl,\n      ...request\n    });\n  }\n\n  private rootUrl() {\n    return new URI(this.cndUrl);\n  }\n\n  private async getInfo(): Promise<GetInfo> {\n    const response = await axios.get(this.rootUrl().toString());\n    return response.data;\n  }\n}\n"]}